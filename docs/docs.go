// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2021-11-12 15:03:13.703283 +0800 CST m=+17.823133918
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/tag": {
            "post": {
                "description": "create an article tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "create a tag - 创建一个文章标签",
                "parameters": [
                    {
                        "description": "Add article tag",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateTagRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.CreateTagResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/render.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update an article tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Update a tag - 更新文章标签",
                "parameters": [
                    {
                        "description": "Update article tag",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateTagRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UpdateTagResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/render.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/tag/{id}": {
            "get": {
                "description": "Get an article tag (获取单个文章标签)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Get a tag - 获取单个文章标签",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.GetTagResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/render.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an article tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Delete a tag - 删除文章标签",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/render.HTTPSuccess"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/render.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Tag": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "modified_by": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "paginate.Query": {
            "type": "object",
            "properties": {
                "all_data": {
                    "type": "boolean"
                },
                "order": {
                    "description": "排序参数(desc:倒序、asc：正序)",
                    "type": "string",
                    "default": "desc",
                    "enum": [
                        "desc",
                        "asc"
                    ]
                },
                "order_by": {
                    "description": "排序对象",
                    "type": "string",
                    "default": "id"
                },
                "page": {
                    "description": "页码",
                    "type": "integer",
                    "default": 1,
                    "minimum": -1
                },
                "page_size": {
                    "description": "每页大小(最大1000条)",
                    "type": "integer",
                    "default": 20,
                    "maximum": 1000,
                    "minimum": -1
                },
                "search": {
                    "description": "模糊查询",
                    "type": "string"
                }
            }
        },
        "render.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "Service internal error"
                }
            }
        },
        "render.HTTPSuccess": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "request ok 200"
                }
            }
        },
        "render.PaginateData": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "object"
                },
                "paginate": {
                    "$ref": "#/definitions/render.PaginateInfo"
                }
            }
        },
        "render.PaginateInfo": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "页数",
                    "type": "integer"
                },
                "page_size": {
                    "description": "每页数据量",
                    "type": "integer"
                },
                "total": {
                    "description": "数据总数",
                    "type": "integer"
                }
            }
        },
        "render.PaginateResult": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "状态码",
                    "type": "integer"
                },
                "data": {
                    "description": "返回内容",
                    "$ref": "#/definitions/render.PaginateData"
                },
                "msg": {
                    "description": "请求结果",
                    "type": "string"
                }
            }
        },
        "request.CreateTagRequest": {
            "type": "object",
            "required": [
                "created_by",
                "name"
            ],
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                }
            }
        },
        "request.UpdateTagRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                }
            }
        },
        "response.CreateTagResponse": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                }
            }
        },
        "response.GetTagResponse": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "modified_by": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                }
            }
        },
        "response.UpdateTagResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
